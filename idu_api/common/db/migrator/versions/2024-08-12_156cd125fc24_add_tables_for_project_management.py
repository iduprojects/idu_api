# pylint: disable=no-member,invalid-name,missing-function-docstring,too-many-statements
"""add tables for project management

Revision ID: 156cd125fc24
Revises: 958163828b45
Create Date: 2024-08-12 17:09:25.190273

"""
from typing import Sequence, Union

import geoalchemy2
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "156cd125fc24"
down_revision: Union[str, None] = "958163828b45"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "projects_territory_data",
        sa.Column(
            "project_territory_id",
            sa.Integer(),
            server_default=sa.text("nextval('user_projects_unmanaged.project_territory_id_seq')"),
            nullable=False,
        ),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                spatial_index=False, from_text="ST_GeomFromEWKT", name="geometry", nullable=False
            ),
            nullable=False,
        ),
        sa.Column(
            "centre_point",
            geoalchemy2.types.Geometry(
                geometry_type="POINT", spatial_index=False, from_text="ST_GeomFromEWKT", name="geometry", nullable=False
            ),
            nullable=False,
        ),
        sa.Column(
            "properties", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["user_projects_unmanaged.projects_territory_data.project_territory_id"],
            name=op.f("projects_territory_data_fk_parent_id__projects_territory_data"),
        ),
        sa.PrimaryKeyConstraint("project_territory_id", name=op.f("projects_territory_data_pk")),
        schema="user_projects_unmanaged",
    )
    op.create_table(
        "territories_data",
        sa.Column(
            "territory_id", sa.Integer(), server_default=sa.text("nextval('territories_data_id_seq')"), nullable=False
        ),
        sa.Column("territory_type_id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                spatial_index=False, from_text="ST_GeomFromEWKT", name="geometry", nullable=False
            ),
            nullable=False,
        ),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.Column(
            "properties", postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False
        ),
        sa.Column(
            "centre_point",
            geoalchemy2.types.Geometry(
                geometry_type="POINT", spatial_index=False, from_text="ST_GeomFromEWKT", name="geometry", nullable=False
            ),
            nullable=False,
        ),
        sa.Column("admin_center", sa.Integer(), nullable=True),
        sa.Column("okato_code", sa.String(length=20), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["territories_data.territory_id"],
            name=op.f("territories_data_fk_parent_id__territories_data"),
        ),
        sa.ForeignKeyConstraint(
            ["territory_type_id"],
            ["territory_types_dict.territory_type_id"],
            name=op.f("territories_data_fk_territory_type_id__territory_types_dict"),
        ),
        sa.PrimaryKeyConstraint("territory_id", name=op.f("territories_data_pk")),
    )
    op.create_table(
        "projects_data",
        sa.Column(
            "project_id",
            sa.Integer(),
            server_default=sa.text("nextval('user_projects_unmanaged.project_id_seq')"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("project_territory_id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(length=600), nullable=True),
        sa.Column("public", sa.Boolean(), nullable=False),
        sa.Column("image_url", sa.String(length=200), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_territory_id"],
            ["user_projects_unmanaged.projects_territory_data.project_territory_id"],
            name=op.f("projects_data_fk_project_territory_id__projects_territory_data"),
        ),
        sa.PrimaryKeyConstraint("project_id", name=op.f("projects_data_pk")),
        schema="user_projects_unmanaged",
    )
    op.create_table(
        "functional_zones_data",
        sa.Column(
            "functional_zone_id",
            sa.Integer(),
            server_default=sa.text("nextval('functional_zones_data_id_seq')"),
            nullable=False,
        ),
        sa.Column("territory_id", sa.Integer(), nullable=False),
        sa.Column("functional_zone_type_id", sa.Integer(), nullable=False),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                spatial_index=False, from_text="ST_GeomFromEWKT", name="geometry", nullable=False
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["functional_zone_type_id"],
            ["functional_zone_types_dict.functional_zone_type_id"],
            name=op.f("functional_zones_data_fk_functional_zone_type_id__functional_zone_types_dict"),
        ),
        sa.ForeignKeyConstraint(
            ["territory_id"],
            ["territories_data.territory_id"],
            name=op.f("functional_zones_data_fk_territory_id__territories_data"),
        ),
        sa.PrimaryKeyConstraint("functional_zone_id", name=op.f("functional_zones_data_pk")),
    )
    op.create_table(
        "object_geometries_data",
        sa.Column(
            "object_geometry_id",
            sa.Integer(),
            server_default=sa.text("nextval('object_geometries_data_id_seq')"),
            nullable=False,
        ),
        sa.Column("territory_id", sa.Integer(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                spatial_index=False, from_text="ST_GeomFromEWKT", name="geometry", nullable=False
            ),
            nullable=False,
        ),
        sa.Column(
            "centre_point",
            geoalchemy2.types.Geometry(
                geometry_type="POINT", spatial_index=False, from_text="ST_GeomFromEWKT", name="geometry", nullable=False
            ),
            nullable=False,
        ),
        sa.Column("address", sa.String(length=300), nullable=True),
        sa.ForeignKeyConstraint(
            ["territory_id"],
            ["territories_data.territory_id"],
            name=op.f("object_geometries_data_fk_territory_id__territories_data"),
        ),
        sa.PrimaryKeyConstraint("object_geometry_id", name=op.f("object_geometries_data_pk")),
    )
    op.drop_table("aglomeration_types_dict")
    op.drop_table("profile_types_dict")
    op.drop_constraint("indicators_dict_name_key", "indicators_dict", type_="unique")
    op.drop_constraint(
        "living_buildings_data_fk_physical_object_id__physical_o_2f2e", "living_buildings_data", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("service_types_normatives_data_fk_territory_id__territories_data"),
        "service_types_normatives_data",
        "territories_data",
        ["territory_id"],
        ["territory_id"],
    )
    op.create_foreign_key(
        op.f("territory_indicators_data_fk_territory_id__territories_data"),
        "territory_indicators_data",
        "territories_data",
        ["territory_id"],
        ["territory_id"],
    )
    op.drop_constraint(
        "urban_objects_data_fk_physical_object_id__physical_objects_data", "urban_objects_data", type_="foreignkey"
    )
    op.drop_constraint("urban_objects_data_fk_service_id__services_data", "urban_objects_data", type_="foreignkey")
    op.create_foreign_key(
        op.f("urban_objects_data_fk_physical_object_id__physical_objects_data"),
        "urban_objects_data",
        "physical_objects_data",
        ["physical_object_id"],
        ["physical_object_id"],
    )
    op.create_foreign_key(
        op.f("urban_objects_data_fk_service_id__services_data"),
        "urban_objects_data",
        "services_data",
        ["service_id"],
        ["service_id"],
    )
    op.create_foreign_key(
        op.f("urban_objects_data_fk_object_geometry_id__object_geometries_data"),
        "urban_objects_data",
        "object_geometries_data",
        ["object_geometry_id"],
        ["object_geometry_id"],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("urban_objects_data_fk_object_geometry_id__object_geometries_data"),
        "urban_objects_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("urban_objects_data_fk_service_id__services_data"), "urban_objects_data", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("urban_objects_data_fk_physical_object_id__physical_objects_data"),
        "urban_objects_data",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "urban_objects_data_fk_service_id__services_data",
        "urban_objects_data",
        "services_data",
        ["service_id"],
        ["service_id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "urban_objects_data_fk_physical_object_id__physical_objects_data",
        "urban_objects_data",
        "physical_objects_data",
        ["physical_object_id"],
        ["physical_object_id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        op.f("territory_indicators_data_fk_territory_id__territories_data"),
        "territory_indicators_data",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("service_types_normatives_data_fk_territory_id__territories_data"),
        "service_types_normatives_data",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "living_buildings_data_fk_physical_object_id__physical_o_2f2e",
        "living_buildings_data",
        "physical_objects_data",
        ["physical_object_id"],
        ["physical_object_id"],
        ondelete="CASCADE",
    )
    op.create_unique_constraint("indicators_dict_name_key", "indicators_dict", ["name_full"])
    op.create_table(
        "profile_types_dict",
        sa.Column("profile_type_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("zone_nickname", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("profile_type_id", name="profile_types_dict_pkey"),
        sa.UniqueConstraint("name", name="profile_types_dict_name_key"),
    )
    op.create_table(
        "aglomeration_types_dict",
        sa.Column("aglomeration_type_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("aglomeration_type_id", name="aglomeration_types_dict_pkey"),
        sa.UniqueConstraint("name", name="aglomeration_types_dict_name_key"),
    )
    op.drop_table("object_geometries_data")
    op.drop_table("functional_zones_data")
    op.drop_table("projects_data", schema="user_projects_unmanaged")
    op.drop_table("territories_data")
    op.drop_table("projects_territory_data", schema="user_projects_unmanaged")
    # ### end Alembic commands ###
